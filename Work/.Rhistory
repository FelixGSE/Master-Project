for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
m <- json.unlist(document)
dim(m)
head(m)
thief      <- rep("Theft",22)
robbery    <- rep("Robbery",6)
sex        <- rep("Sex",17)
drug       <- rep("Drug",22)
owi        <- rep("OWI",4)
aussault   <- rep("Assault",10)
escape     <- rep("Escape",4)
vandalism  <- rep("Vandalism",1)
forgery    <- rep("Forgery",7)
probabiton <- rep("Probabiton",1)
other      <- rep("Other",2)
all.names <- c(thief,robbery,sex,drug,owi,aussault,escape,vandalism,forgery,probabiton,other)
length(all.names)
healthy    <- rep("Healthy",96)
all.names <- c(thief,robbery,sex,drug,owi,aussault,escape,vandalism,forgery,probabiton,other)
thief      <- rep("Theft",22)
robbery    <- rep("Robbery",6)
sex        <- rep("Sex",17)
drug       <- rep("Drug",22)
owi        <- rep("OWI",4)
aussault   <- rep("Assault",10)
escape     <- rep("Escape",4)
vandalism  <- rep("Vandalism",1)
forgery    <- rep("Forgery",7)
probabiton <- rep("Probabiton",1)
other      <- rep("Other",2)
healthy    <- rep("Healthy",96)
all.names  <- c(thief,robbery,sex,drug,owi,aussault,escape,
vandalism,forgery,probabiton,other,healthy)
my.heatmap(cosine.cat,nco=200)
cosine.cat <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/cosine_cat.txt', method='C'))
my.heatmap(cosine.cat,nco=200)
diag(cosine.cat)
my.heatmap(cosine.cat,nco=200,rname = all.names)
my.heatmap(cosine.cat,nco=200,colors = "Reds",rname = all.names)
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
row.names(matrix) <- cname
colnames(matrix)  <- cname
return(matrix)
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
my.heatmap(cosine.cat,nco=200,colors = "Reds",rname = all.names)
tset <- my.heatmap(cosine.cat,nco=200,colors = "Reds", rname = all.names)
rownames(tset) <- all.names
tset
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
rownames(matrix)  <- cname
colnames(matrix)  <- cname
return(matrix)
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
tset <- my.heatmap(cosine.cat,nco=200,colors = "Reds", rname = all.names)
rownames(tset)
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
cname = NULL,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
rownames(matrix)  <- cname
colnames(matrix)  <- cname
return(matrix)
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
rownames(matrix)  <- rname
colnames(matrix)  <- rname
return(matrix)
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
tset <- my.heatmap(cosine.cat,nco=200,colors = "Reds", rname = all.names)
rownames(tset)
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
rownames(matrix)  <- rname
colnames(matrix)  <- rname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
h01 <- my.heatmap( cosine.cat,nco=200,colors = "Reds", rname = all.names )
setwd('Report/TeX/Pictures/')
h01 <- my.heatmap( cosine.cat,nco=200,colors = "Reds", rname = all.names,
save = TRUE, "cosine.png")
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE,
plotname = "plot.png" )
{
rownames(matrix)  <- rname
colnames(matrix)  <- rname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap
dev.off()
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
h01 <- my.heatmap( cosine.cat,nco=200,colors = "Reds", rname = all.names,
save = TRUE, "cosine.png")
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL)
{
rownames(matrix)  <- rname
colnames(matrix)  <- rname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
h01 <- my.heatmap( cosine.cat,nco=200,colors = "Reds", rname = all.names)
rownames(matrix)  <- rev(rname)
#--------------------------------------------------------------------------------
# Heatmap function
#--------------------------------------------------------------------------------
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100,
bparam = 9, margin = c(2,2), height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL)
{
rownames(matrix)  <- rev(rname)
colnames(matrix)  <- rname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
}
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
line.plot <- function(){
reds  <- colorRampPalette(brewer.pal(9,"Reds"))(ncoolor)
blues <- colorRampPalette(brewer.pal(9,"Blues"))(ncoolor)
diverging.colors <- c(reds,blues)
}
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
json.unlist <- function(data){
mat <- data[[1]]
for( i in 2:length(data) ){
mat <- rbind(mat,data[[i]])
}
rownames(mat) <- NULL
colnames(mat) <- NULL
return(mat)
}
h01 <- my.heatmap( cosine.cat,nco=200,colors = "Reds", rname = all.names)
cosine.ent <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/cosine_ent.txt', method='C'))
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/')
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/')
cosine.ent <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/cosine_ent.txt', method='C'))
h02 <- my.heatmap( cosine.ent,nco=200,colors = "Reds", rname = all.names)
h03 <- my.heatmap( edr.ent,nco=200,colors = "Reds", rname = all.names)
edr.ent    <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/edr_sim.txt', method='C'))
h03 <- my.heatmap( edr.ent,nco=200,colors = "Reds", rname = all.names)
eskim.cho  <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/eskin_sim.txt', method='C'))
h04 <- my.heatmap( eskim.cho,nco=200,colors = "Reds", rname = all.names)
euclid.cho.dis <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/eucliddist.txt', method='C'))
h05 <- my.heatmap( euclid.cho.dis,nco=200,colors = "Reds", rname = all.names)
lin.cho.dis    <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/lin_disim.txt', method='C'))
h05 <- my.heatmap( lin.cho.dis,nco=200,colors = "Reds", rname = all.names)
lin.cho.sim    <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/lin_sim.txt', method='C'))
h07 <- my.heatmap( lin.cho.sim,nco=200,colors = "Reds", rname = all.names)
overlap.cho    <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/overlap.txt', method='C'))
h08 <- my.heatmap( overlap.cho,nco=200,colors = "Reds", rname = all.names)
rbf.ent        <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/rbf.txt', method='C'))
h09 <- my.heatmap( rbf.ent,nco=200,colors = "Reds", rname = all.names)
timewarp.ent   <- json.unlist(fromJSON(file='Code and Analysis/Results/Real data/21/timewarp.txt', method='C'))
h09 <- my.heatmap( timewarp.ent,nco=200,colors = "Reds", rname = all.names)
### Clear workspace
rm(list = ls())
### Set general file path
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/')
### Load Packages
if (!require("RColorBrewer")) install.packages("RColorBrewer"); library(RColorBrewer)
if (!require("rjson"))        install.packages("rjson");        library(rjson)
### Get auxilliary functions
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
### Get Data
cosine.cat     <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d04/entropy_softmax_20_11_09.txt
### Clear workspace
rm(list = ls())
### Set general file path
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/')
### Load Packages
if (!require("RColorBrewer")) install.packages("RColorBrewer"); library(RColorBrewer)
if (!require("rjson"))        install.packages("rjson");        library(rjson)
### Get auxilliary functions
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
### Get Data
cosine.cat     <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d04/entropy_softmax_20_11_09.txt
entropy.sim <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d04/entropy_softmax_20_11_09.txt', method='C'))
entropy.sim <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d04/entropy_softmax_20_11_09.txt', method='C'))
dim(entropy.sim)
entropy.sim <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d03/entropy_softmax_20_09_04.txt', method='C'))
dim(entropy.sim)
entropy.sim <- json.unlist(fromJSON(file='Code and Analysis/Data/Artificial Data Sets/d05/entropy_softmax_21_23_53.txt', method='C'))
dim(entropy.sim)
co <- 1/255
pers.green      <- rgb( co *  14 ,  co * 105 , co *  90 )
pers.blue       <- rgb( co *  22 ,  co *  54 , co *  92 )
pers.red        <- rgb( co *  99 ,  co *  37 , co *  35 )
pers.gray       <- rgb( co * 150 ,  co * 150 , co * 150 )
pers.orange     <- rgb( co * 186 ,  co *  85 , co *  59 )
pers.beige      <- rgb( co * 196 ,  co * 189 , co * 151 )
cols <- c(rep(pers.blue,20),rep(pers.green,20),rep(pers.red,20))
x    <- 1:ncol(entropy.sim)
plot(x,col.average[2,],type="l",ylim=c(0,2), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
plot(x,entropy.sim[1,],type="l",ylim=c(0,2), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
for( i in 2:nrow(entropy.sim)){
lines(x,col.average[i,],col = cols[i])
}
for( i in 2:nrow(entropy.sim)){
lines(x,entropy.sim[i,],col = cols[i])
}
cols <- c(rep('red',20),rep('green',20),rep('blue',20))
x    <- 1:ncol(entropy.sim)
plot(x,entropy.sim[1,],type="l",ylim=c(0,2), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
for( i in 2:nrow(entropy.sim)){
lines(x,entropy.sim[i,],col = cols[i])
}
legend("bottomright",
c("α = 0.5 | τ = 0.1","Robbery","Sex"),
lty = 1,
col = c('reds','green','blue'),
cex = 1,
bty = "n",
ncol = 2,
y.intersp = 2,
)
legend("bottomright",
c("α = 0.5 | τ = 0.1","Robbery","Sex"),
lty = 1,
col = c('red','green','blue'),
cex = 1,
bty = "n",
ncol = 2,
y.intersp = 2,
)
cols <- c(rep('red',20),rep('green',20),rep('blue',20))
x    <- 1:ncol(entropy.sim)
plot(x,entropy.sim[1,],type="l",ylim=c(0,2), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
for( i in 2:nrow(entropy.sim)){
lines(x,entropy.sim[i,],col = cols[i])
}
legend("bottomright",
c("α = 0.5 | τ = 0.1","α = 0.5 | τ = 0.7","α = 0.5 | τ = 1.8"),
lty = 1,
col = c('red','green','blue'),
cex = 1,
bty = "n",
ncol = 1,
y.intersp = 2,
)
title(main ="Entropy of 3-arm bandit μ = {0,0.5,1} | σ = {1}")
cols <- c(rep('red',20),rep('green',20),rep('blue',20))
x    <- 1:ncol(entropy.sim)
plot(x,entropy.sim[1,],type="l",ylim=c(0,2), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
for( i in 2:nrow(entropy.sim)){
lines(x,entropy.sim[i,],col = cols[i])
}
legend("bottomright",
c("α = 0.5 | τ = 0.1","α = 0.5 | τ = 0.7","α = 0.5 | τ = 1.8"),
lty = 1,
col = c('red','green','blue'),
cex = 1,
bty = "n",
ncol = 1,
y.intersp = 2,
)
title(main ="Entropy form 3-arm bandit ( μ = (0,0.5,1) | σ = (1,1,1) )")
cols <- c(rep('red',20),rep('green',20),rep('blue',20))
x    <- 1:ncol(entropy.sim)
plot(x,entropy.sim[1,],type="l",ylim=c(0,1.6), col = cols[1], xlab = "Steps", ylab= "Sequentiel Entropy" )
for( i in 2:nrow(entropy.sim)){
lines(x,entropy.sim[i,],col = cols[i])
}
legend("bottomright",
c("α = 0.5 | τ = 0.1","α = 0.5 | τ = 0.7","α = 0.5 | τ = 1.8"),
lty = 1,
col = c('red','green','blue'),
cex = 1,
bty = "n",
ncol = 1,
y.intersp = 2,
)
title(main ="Entropy form 3-arm bandit ( μ = (0,0.5,1) | σ = (1,1,1) )")
