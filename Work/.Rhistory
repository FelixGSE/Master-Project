plot(density(d02),type='l')
lines(density(d03),col='red')
lines(density(d04),col='green')
plot(density(d02),type='l',ylim=c(0,1))
lines(density(d03),col='red')
lines(density(d04),col='green')
plot(density(d02),type='l',ylim=c(0,1),xlab="Degree","")
lines(density(d03),col='red')
lines(density(d04),col='green')
legend('topright',c('10**2','10**4','10**4'),
col=('blue','red','green'))
col=('blue','red','green'))
legend('topright',c('10**2','10**4','10**4'),col=('blue','red','green'))
legend('topright',legend=c('10**2','10**4','10**4'),col=('blue','red','green'))
legend('topright',legend=c('10**2','10**4','10**4'))
legend('topright',legend=c('10**2','10**4','10**4'),lty=1,col=('blue','red','green'))
legend('topright',legend=c('10**2','10**4','10**4'),lty=1,col=c('blue','red','green'))
CompleteGraph <- function(n) {
myEdges <- combn(1:n,2)
myGraph <- graph(myEdges, directed=FALSE)
return(myGraph)
}
start = CompleteGraph(4)
plot(start)
b02 <- barabasi.game(10**2,m=4,start.graph = start); d02 = degree(b02)
barabasi.game(10**2,m=4,start.graph = start)
start = igraph_full(4)
start = full(4)
start = full_citation_graph(4)
plot(start)
start = full_citation_graph(4)
plot(start)
class(start)
start = full_citation_graph(4,directed=FALSE)
class(start)
class(start)
graph(start)
start = matrix(1,4,4) - diag(1,4)
start
start = graph(matrix(1,4,4) - diag(1,4))
start = graph.adjacency(matrix(1,4,4) - diag(1,4))
plot(start)
start = graph.adjacency(matrix(1,4,4) - diag(1,4),directed=FALSE)
start = graph.adjacency(matrix(1,4,4) - diag(1,4), mode=c("undirected"))
b02 <- barabasi.game(10**2,m=4,start.graph = start); d02 = degree(b02)
b02 <- barabasi.game(10**2,m=4,start.graph = start,directed = FALSE); d02 = degree(b02)
b03 <- barabasi.game(10**3,m=4,start.graph = start,directed = FALSE); d03 = degree(b03)
b04 <- barabasi.game(10**4,m=4,start.graph = start,directed = FALSE); d04 = degree(b04)
plot(density(d02),type='l',ylim=c(0,1),xlab="Degree","")
lines(density(d03),col='red')
lines(density(d04),col='green')
plot(density(d02),type='l',ylim=c(0,0.5),xlab="Degree","")
lines(density(d03),col='red')
lines(density(d04),col='green')
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","")
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","")
start = graph.adjacency(matrix(1,4,4) - diag(1,4), mode=c("undirected"))
b02 <- barabasi.game(10**2,m=4,start.graph = start,directed = FALSE); d02 = degree(b02)
b03 <- barabasi.game(10**3,m=4,start.graph = start,directed = FALSE); d03 = degree(b03)
b04 <- barabasi.game(10**4,m=4,start.graph = start,directed = FALSE); d04 = degree(b04)
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","")
lines(density(d03),col='red')
lines(density(d02),col='green')
legend('topright',legend=c('10**4','10**3','10**2'),lty=1,col=c('blue','red','green'))
# ---------------------------------------------------------------
lines(density(d03),col='red')
lines(density(d02),col='green')
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50))
lines(density(d03),col='red')
lines(density(d02),col='green')
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50))
lines(density(d03),col='red',xlim=c(0,50))
lines(density(d02),col='green',xlim=c(0,50))
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50))
par(new=TRUE)
plot(density(d03),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50))
par(new=TRUE)
plot(density(d02),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50))
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50),col='blue')
par(new=TRUE)
plot(density(d03),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50),col="red")
par(new=TRUE)
plot(density(d02),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50),col='green')
legend('topright',legend=c('10**4','10**3','10**2'),lty=1,col=c('blue','red','green'))
title(main="Degree Distriubtions for Barabasi-Albert model")
plot(density(d03),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50),col="red")
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,50),col='blue')
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,350),col='blue')
par(new=TRUE)
plot(density(d03),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,350),col="red")
par(new=TRUE)
plot(density(d02),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,350),col='green')
legend('topright',legend=c('10**4','10**3','10**2'),lty=1,col=c('blue','red','green'))
title(main="Degree Distriubtions for Barabasi-Albert model")
plot(density(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col='blue')
par(new=TRUE)
plot(density(d03),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col="red")
par(new=TRUE)
plot(density(d02),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col='green')
legend('topright',legend=c('10**4','10**3','10**2'),lty=1,col=c('blue','red','green'))
title(main="Degree Distriubtions for Barabasi-Albert model")
plot(ecdf(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col='blue')
plot(ecdf(d04),type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col='blue')
ecdf(c(1,2,2,3,3))
d03
ecdf(d04)
plot(ecdf(d04))
plot(ecdf(d04),type='l',ylim=c(0,0.1),xlab="Degree","",col='blue')
d04
y <- ecdf(d04)
plot(y,type='l',ylim=c(0,0.1),xlab="Degree","",col='blue')
y
plot(y,ylim=c(0,0.1),xlab="Degree","",col='blue')
plot(ecdf(c(1,2,2,3,3)))
y <- as.numeric(ecdf(d04))
ecdf(d04)
str(ecdf(d04))
ecdf(d04)$ecdf
ecdf(d04)[1]
plot(y,ylim=c(0,1),xlab="Degree","",col='blue')
plot(y)
plot(y,ylim=c(0,1),xlab="Degree","",col='blue')
plot(y,ylim=c(0,1),xlab="Degree","")
plot(y)
y <-ecdf(d04)
plot(y)
plot(y)
plot(y,ylim=c(0,1),xlab="Degree","",col='blue')
plot(y)
plot(y,ylim=c(0,1),xlab="Degree","",col='blue')
plot(y,xlab="Degree","",col='blue')
plot(y,xlab="Degree","")
quantiles(d02)
quantile(d02)
X <- c(101, 103, 107, 111)
f <- ecdf(X)
inv_f <- inv_ecdf(f)
my.ecdf <- fun.ecdf(sort(d04))
fun.ecdf <- ecdf(d04)
my.ecdf <- fun.ecdf(sort(d04))
my.ecdf
plot(my.ecdf,xlab="Degree")
plot(my.ecdf,type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col="red")
x = seq(length(d02))
x
x = seq(unique(length(d02)))
x
d02
x = seq(unique(d02))
x
x = seq(min(unique(d02)),min(unique(d02)),length(my.ecdf))
length(x)
length(my.ecdf)
x = seq(min(unique(d02)),max(unique(d02)),length(my.ecdf))
length(x)
seq(min(unique(d02)),max(unique(d02)),length(my.ecdf))
max(unique(d02))
seq(1,27,10000)
seq(min(unique(d02)),max(unique(d02)),10)
x = seq(min(unique(d02)),max(unique(d02)),by=0.01)
zz
x
x = seq(min(unique(d02)),max(unique(d02)),by=1/length(myecdf))
x = seq(min(unique(d02)),max(unique(d02)),by=1/length(my.ecdf))
length(x)
1/length(my.ecdf)
lines(my.ecdf)
length(seq(1,27,0.0001)
)
length(seq(1,27,0.001))
length(seq(1,27,0.026))
length(seq(1,27,0.025))
length(seq(1,27,0.026))
length(seq(1,27,0.0026))
length(seq(1,27,0.0026)[-1])
x = seq(1,27,0.0026)[-1]
plot(x,my.ecdf,type='l',ylim=c(0,0.5),xlab="Degree","",xlim=c(0,250),col="red")
x
plot(x,my.ecdf,type='l',ylim=c(0,0.5),xlab="Degree","",col="red")
plot(x,my.ecdf,type='l',ylim=c(0,0.5),xlab="Degree","",col="red")
plot(x,my.ecdf,type='l',ylim=c(0,0.5),xlim=c(0,27),xlab="Degree","",col="red")
n = length(d02)
plot(ozone.ordered = sort(d02), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
n = sum(d02)
plot(ozone.ordered = sort(d02), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
plot(sort(d02), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
ozone = airquality$Ozone
n = sum(ozone)
plot(sort(ozone), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
n = sum(ozone,na.rm = FALSE)
plot(sort(ozone), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
n
n = sum(ozone,na.rm = TRUE)
plot(sort(ozone), (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '',
main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
(1:n)/n
length(ozone)
ozone.ordered = sort(ozone)
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
transitivity(b02,type="local")
mean((transitivity(b02,type="local"))
avg01 <- mean((transitivity(b02,type="local"))
avg01 <- mean((transitivity(b02,type="local"))
avg02 <- mean((transitivity(b03,type="local"))
avg03 <- mean(transitivity(b04,type="local"))
avg01 <- mean(transitivity(b02,type="local"))
avg02 <- mean(transitivity(b03,type="local"))
avg03 <- mean(transitivity(b04,type="local"))
avg01
avg02
avg03
outcome <- rep(NA,100000)
for(i in 1:100000){
temp <- barabasi.game(i,m=4,start.graph = start,directed = FALSE)
avg <- mean(transitivity(temp,type="local"))
outcome[i] <- avg
}
for(i in 10:100000){
temp <- barabasi.game(i,m=4,start.graph = start,directed = FALSE)
avg <- mean(transitivity(temp,type="local"))
outcome[i] <- avg
}
outcome <- rep(NA,100000)
for(i in 10:100000){
temp <- barabasi.game(i,m=4,start.graph = start,directed = FALSE)
avg <- mean(transitivity(temp,type="local"))
outcome[i] <- avg
cat('\n',i)
}
setdiff(outcome,NA)
set <- setdiff(outcome,NA)
x <- length(set)
plot(x,set)
x <- 5:length(set)+5
plot(x,set)
x <- 5:(length(set)+5)
plot(x,set)
length(x)
length(set)
x <- 5:(length(set)+6)
plot(x,set)
length(x)
x <- 5:(length(set)+4)
plot(x,set)
plot(x,set,type="l")
hline(0)
abline(0)
abline(h=0)
A = matrix(1,4,4) - diag(4)
D = diag(rowsum(A)) + diag(4)
D = diag(row.sum(A)) + diag(4)
D = diag(rowsum(A)) + diag(4)
D = rowsum(A) * diag(4)
A
D = rowsum(A)*%* rep(1,4) * diag(4)
D = rowsum(A) %*% rep(1,4) * diag(4)
diag(4)
rowsum(A)
rowsum(A)
rowsum(A) %*% rep(1,4)
rowsum(A) %*% rep(1,4)
A %*% rep(1,4)
D = A %*% rep(1,4) * diag(4)
A %*% rep(1,4)
D = as.numeric(A %*% rep(1,4)) * diag(4)
D
D = solve(as.numeric(A %*% rep(1,4)) * diag(4))
D %*% rep(1,4)
A %*% D %*% rep(1,4)
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
d
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
N <- nrow(A)
library(igraph)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
d
D <- diag(5) * d
D
P <- t(A %*% solve(D))
det(P)
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
solve(I-R)
c <- diag(solve(I-R))
c
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
function (a, b, tol = .Machine$double.eps, LINPACK = FALSE,
Q
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
function (a, b, tol = .Machine$double.eps, LINPACK = FALSE,
options()$error # returned:
(function ()
{
.rs.breakOnError(FALSE)
})()
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
Q
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
library(igraph)
rwc <- function(A){
N <- nrow(A)
d <- as.numeric(A %*% rep(1,N))
D <- diag(5) * d
P <- t(A %*% solve(D))
S <- d/sum(d)
I <- diag(N)
R <- P-diag(S)
c <- diag(solve(I-R))
return(c)
}
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
A <- as.matrix(get.adjacency(erdos.renyi.game(5,p=0.5)))
rwc(A)
f <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
f(c('A','B','C'))
f(c('1','2','3'))
3?5
3/5
### Clear workspace
rm(list = ls())
### Set general file path
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/')
### Load Packages
if (!require("RColorBrewer")) install.packages("RColorBrewer"); library(RColorBrewer)
### Get auxilliary functions
source('Code and Analysis/R-Files/Auxlliary_Functions.R')
### Get Data
b00 <- read.csv('Code and Analysis/Results/Real data/00/b00.csv')
b01 <- read.csv('Code and Analysis/Results/Real data/01/b01.csv')
b02 <- read.csv('Code and Analysis/Results/Real data/02/b02.csv')
b03 <- read.csv('Code and Analysis/Results/Real data/03/b03.csv')
b04 <- read.csv('Code and Analysis/Results/Real data/04/b04.csv')
b05 <- read.csv('Code and Analysis/Results/Real data/05/b05.csv')
b06 <- read.csv('Code and Analysis/Results/Real data/06/b06.csv')
b07 <- read.csv('Code and Analysis/Results/Real data/07/b07.csv')
#b08 <- read.csv('Code and Analysis/Results/Real data/08/b08.csv')
b09 <- read.csv('Code and Analysis/Results/Real data/09/b09.csv')
#b10 <- read.csv('Code and Analysis/Results/Real data/10/b10.csv')
b20 <- read.csv('Code and Analysis/Results/Real data/20/b20.csv')
b21 <- read.csv('Code and Analysis/Results/Real data/21/b21.csv')
b66 <- read.csv('Code and Analysis/Results/Real data/66/b66.csv')
head(b00)
dim(b00)
