K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
w
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
x
matrix( c(0,3,0,0), 2, 2)
matrix( c(4,2,0,1), 2, 2)
install.packages("TMVA")
100000000*1000
100000000*1000
setwd('/Users/felix/Documents/GSE/Term 3/14D009 Social and Economic/Networks/Problemsets/14D009-Social-and-Economic-Networks/')
set.seed(1,2,3)
set.seed(123)
runif(1)
pnorm(100)
pnorm(1)
pnorm(c(1,23))
pnorm(rnorm(100))
plot(pnorm(rnorm(10000)))
install.packages('VIM')
data(sleep, package = "VIM")
## for missing values
x <- sleep[, -(8:10)]
x[,c(1,2,4,6,7)] <- log10(x[,c(1,2,4,6,7)])
matrixplot(x, sortby = "BrainWgt")
## for imputed values
x_imp <- kNN(sleep[, -(8:10)])
x_imp[,c(1,2,4,6,7)] <- log10(x_imp[,c(1,2,4,6,7)])
matrixplot(x_imp, delimiter = "_imp", sortby = "BrainWgt")
install.packages('VIM')
library('VIM')
data(sleep, package = "VIM")
## for missing values
x <- sleep[, -(8:10)]
x[,c(1,2,4,6,7)] <- log10(x[,c(1,2,4,6,7)])
matrixplot(x, sortby = "BrainWgt")
## for imputed values
x_imp <- kNN(sleep[, -(8:10)])
x_imp[,c(1,2,4,6,7)] <- log10(x_imp[,c(1,2,4,6,7)])
matrixplot(x_imp, delimiter = "_imp", sortby = "BrainWgt")
matrixplot(x_imp, delimiter = "_imp", sortby = "BrainWgt")
matrixplot(matrix(c(1,2,3,4),nrow=1,ncol = 4))
?matrixplot
matrix(c(1,2,3,4),nrow=1,ncol = 4)
m =matrix(c(1,2,3,4),nrow=1,ncol = 4)
x_imp
m =matrix(c(1,0,0,1),nrow=1,ncol = 4)
matrixplot(m, col=c('red','blue'))
matrixplot(m, col=c('red','blue'),fixup=TRUE)
x <- abs(runif(100*100,0, 100))
x <- matrix(x,nrow=100)
levelplot(x, cuts=1, col.regions=c("red", "blue"))
library("lattice")
x <- abs(runif(100*100,0, 100))
x <- matrix(x,nrow=100)
levelplot(x, cuts=1, col.regions=c("red", "blue"))
x
class(x)
dim(x)
x <- abs(runif(100*100))
x <- abs(runif(100))
x <- matrix(x,nrow=1)
levelplot(x, cuts=1, col.regions=c("red", "blue"))
levelplot(x, cuts=1, col.regions=c("red", "blue"),pretty=TRUE)
levelplot(x, cuts=1, row.regions=c("red", "blue"),pretty=TRUE)
levelplot(x, cuts=1, row.regions=c("red", "blue"))
levelplot(x, cuts=1, row.regions=c("red", "blue"),colorkey=FALSE)
levelplot(x, cuts=1, row.regions=c("red", "blue"),colorkey=FALSE,tick.number=100)
levelplot(x, cuts=100, row.regions=c("red", "blue"),colorkey=FALSE,tick.number=100)
x <- sample(1,100)
x <- sample(1,100,replace=TRUE)
x
x <- sample(2,100,replace=TRUE)
x
x <- sample(0,100,replace=TRUE)
x
x <- ifelse(x == 2,0,1)
x <- matrix(x,nrow=1)
levelplot(x, cuts=100, row.regions=c("red", "blue"),colorkey=FALSE,tick.number=100)
levelplot(x, cuts=1, row.regions=c("red", "blue"),colorkey=FALSE,tick.number=100)
x <- matrix(x,ncol = =1)
x <- matrix(x,ncol = 1)
levelplot(x, cuts=1, row.regions=c("red", "blue"),colorkey=FALSE,tick.number=100)
x=abs(rnorm(100*100,1,25))
x=matrix(x,nrow=100)
x
x=abs(rnorm(100*100))
x=matrix(x,nrow=1)
x
require(reshape2)
require(ggplot2)
x1=melt(x)
names(x1)=c("x","y","color")
x1$color=factor(x1$color>50)
levels(x1$color)=c("lessthan50","more than 50")
qplot(x, y, fill=color, data=x1,geom='tile')
x1$color
x=sample(2,100,replace=TRUE)
x
x=matrix(x,nrow=1)
require(reshape2)
require(ggplot2)
x1=melt(x)
names(x1)=c("x","y","color")
x1$color=factor(x1$color>1)
levels(x1$color)=c("lessthan50","more than 50")
qplot(x, y, fill=color, data=x1,geom='tile')
x=sample(2,2500,replace=TRUE)
x=matrix(x,nrow=50,50)
row.names(nba) <- sapply(1:50, function(i){
paste0("node ",i)
})
row.names(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
x
col.names(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
colnames(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
x
nba_matrix <- data.matrix(x)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
x=sample(2,100,replace=TRUE)
x=matrix(x,nrow=1)
colnames(x) <- sapply(1:100, function(i){
paste0("node ",i)
})
x
nba_matrix <- data.matrix(x)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10),distfun=FALSE)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = c('red','blue'), scale="column", margins=c(5,10),distfun=NULL)
x=sample(2,2500,replace=TRUE)
x=matrix(x,nrow=50,50)
row.names(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
colnames(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
nba_matrix <- data.matrix(x)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = c('red','blue'), scale="column", margins=c(5,10),distfun=NULL)
cm.colors(256)
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
x=sample(2,2500,replace=TRUE)
x=matrix(x,nrow=50,50)
row.names(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
colnames(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
nba_matrix <- data.matrix(x)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = c('red','blue'), scale="column", margins=c(5,10),distfun=NULL)
cm.colors(256)
colorRampPalette(brewer.pal(9,”Blues”))(100)
colorRampPalette(brewer.pal(9,'Blues'))(100)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Blues'))(256), scale="column", margins=c(5,10),distfun=NULL)
colorRampPalette(brewer.pal(9,'Reds'))(256)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,10),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,100),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,20),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,10),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,10),distfun=NULL)
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
x=sample(2,2500,replace=TRUE)
x=matrix(x,nrow=50,50)
row.names(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
colnames(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
nba_matrix <- data.matrix(x)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,10),distfun=NULL)
cm.colors(256)
colorRampPalette(brewer.pal(9,'Reds'))(256)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256), scale="column", margins=c(5,10),distfun=NULL)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col =colorRampPalette(brewer.pal(9,'Reds'))(256),
scale="column",distfun=NULL)
nba_heatmap
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = c('red','blue'), scale="column", margins=c(5,10),distfun=NULL)
dev.off()
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = c('red','blue'), scale="column", margins=c(5,10),distfun=NULL)
x=sample(2,2500,replace=TRUE)
names(x)
colnames(x)
x=sample(2,2500,replace=TRUE)
x=matrix(x,nrow=50,50)
rownames(x) <- sapply(1:50, function(i){
paste0("node ",i)
})
x
nba_matrix <- data.matrix(x)
typeof(nba_matrix)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(5,10),distfun=NULL)
return( heatmap )
}
my.heatmap(x)
test = my.heatmap(x)
test
plot(test)
class(test)
test = my.heatmap(x,colors="Blues")
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(5,10),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(5,10),distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
getwd()
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(5,10),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(0,0),distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(5,10),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(2,2),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(2,2),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=c(2,2),distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=c(2,2), scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE ){
png(plotname)
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
height = 1200, widht = 1200,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE, height = height, widht = width ){
png(plotname)
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
height = 1200, widht = 1200,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, widht = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
height = 1200, widht = 1200,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
height = 1200, width = 1200,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
my.heatmap <- function( matrix, dendr = NA, dendc = NA, colors = "Reds", nco = 100, bparam = 9, margin = c(2,2),
height = 600, width = 600,
scale = "none", rname = NULL, cname = NULL, save = FALSE, plotname = "plot.png" ){
row.names(matrix) <- cname
colnames(matrix)  <- cname
new.matrix <- data.matrix(matrix)
cols       <- colorRampPalette(brewer.pal(bparam,colors))(nco)
heatmap    <- heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols, scale="column", margins=margin,distfun=NULL)
if( save == TRUE){
png(plotname, height = height, width = width )
heatmap(new.matrix, Rowv=dendr, Colv=dendc, col = cols,margins=margin, scale="column",distfun=NULL)
dev.off()
}
}
test = my.heatmap(x,colors="Blues",save=TRUE)
setwd('../Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files')
setwd('/Users/felix/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files')
source(Auxlliary_Functions.R)
setwd('/Users/felix/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files/')
source(Auxlliary_Functions.R)
source('Auxlliary_Functions.R')
source('/Users/felix/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files/Auxlliary_Functions.R')
setwd('/Users/felix/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/Data/Similarities/')
setwd('~/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/Data/Similarities/')
setwd('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/Data/Similarities/')
source('~/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files/Auxlliary_Functions.R')
source('~/Documents/GSE/Term 3/Master_Project/Master-Project/Work/Code and Analysis/R-Files/Auxlliary_Functions.R')
if (!require("RColorBrewer")) install.packages("RColorBrewer") library(RColorBrewer)
